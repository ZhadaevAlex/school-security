openapi: 3.0.1
info:
  title: OpenAPI definition
  description: API of the "School" task
  contact:
    name: Zhadaev Alexander
    url: www.zhadaev.ru
    email: zhadaevs@yandex.ru
  version: 1.0-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - basicAuth: []
paths:
  /api/students/{id}:
    summary: Represents a student
    description: >
      This resource represents an individual student in the system.
      Each student is identified by a numeric `id`.
    get:
      summary: Get a student by id
      description: >
        This method allows you to get a school student by its id.
      tags:
        - student-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The student id
          example: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
              example:
                id: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
                firstName: Mia
                lastName: Phillips
                group:
                  id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                  name: YT-80
                courses:
                  - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                    name: Computer science
                    description: Subject Computer science
                  - id: cea9af46-4727-4822-8f06-807efe886f42
                    name: Economics
                    description: Subject Economics
        '404':
          description: Student not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Student not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      summary: Edit a student
      description: >
        This method updates the student with the specified id. The values of the student properties are replaced with the values from the request body. Unspecified values are replaced with default values.
      tags:
        - student-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The student id
          example: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
      requestBody:
        description: >
          You must specify the student properties. For the group and courses, it is enough to fill in only the id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
            examples:
              All properties are filled in:
                value:
                  firstName: Mia
                  lastName: Phillips
                  group:
                    id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                  courses:
                  - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                  - id: cea9af46-4727-4822-8f06-807efe886f42
              Not all properties are filled in:
                value:
                  firstName: Mia
                  lastName: Phillips
                  group:
                    id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
              examples:
                All properties are filled in:
                  value:
                    id: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
                    firstName: Mia
                    lastName: Phillips
                    group:
                      id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                      name: null
                    courses:
                    - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                      name: null
                      description: null
                    - id: cea9af46-4727-4822-8f06-807efe886f42
                      name: null
                      description: null
                Not all properties are filled in:
                  value:
                    id: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
                    firstName: Mia
                    lastName: Phillips
                    group:
                      id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                      name: null
                    courses: null
        '404':
          description: Student replace error. Student not found by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Student replace error. Student not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Consists only of spaces:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The student's last name must not be null and must contain at least one non-whitespace character
                        propertyPath: updatePut.studentDto.lastName
                        invalidValue: "  "
                      - message: The student's first name must not be null and must contain at least one non-whitespace character
                        propertyPath: updatePut.studentDto.firstName
                        invalidValue: "  "
                Less than two characters:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The student's last name must consist of at least two characters
                        propertyPath: studentDto
                        invalidValue: B
                      - message: The student's first name must consist of at least two characters
                        propertyPath: studentDto
                        invalidValue: A

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete a student
      description: >
        This method removes the student with the specified id.
      tags:
        - student-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The student id
          example: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
      responses:
        '200':
          description: Successful operation
        '404':
          description: Student delete error. Student not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Student delete error. Student not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    patch:
      summary: Edit a student
      description: >
        This method updates the student with the specified id. The values of the student properties are replaced with the values from the request body. Unspecified values are not changed.
      tags:
        - student-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The student id
          example: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
      requestBody:
        description: >
          You must specify the student parameters. For the group and courses, it is enough to fill in only the id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
            example:
              courses:
                - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                - id: cea9af46-4727-4822-8f06-807efe886f42
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
              example:
                id: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
                firstName: Mia
                lastName: Phillips
                group:
                  id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                  name: YT-80
                courses:
                  - id: cea9af46-4727-4822-8f06-807efe886f42
                    name: null
                    description: null
                  - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                    name: null
                    description: null
        '404':
          description: Student update error. Student not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Student update error. Student not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Consists only of spaces or null:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The student's last name must contain at least one non-whitespace character. Can be null
                        propertyPath: updatePatch.studentDto.lastName
                        invalidValue: "  "
                      - message: The student's first name must contain at least one non-whitespace character. Can be null
                        propertyPath: updatePatch.studentDto.firstName
                        invalidValue: "  "
                Less than two characters:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The student's last name must consist of at least two characters
                        propertyPath: updatePost.studentDto.lastName
                        invalidValue: B
                      - message: The student's first name must consist of at least two characters
                        propertyPath: updatePost.studentDto.firstName
                        invalidValue: A
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/groups/{id}:
    summary: Represents a group
    description: >
      This resource represents an individual group in the system.
      Each group is identified by a numeric `id`.
    get:
      summary: Get a group by id
      description: >
        This method allows you to get a school group by its id.
      tags:
        - group-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The group id
          example: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
              example:
                id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                name: YT-80
        '404':
          description: Group not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Group not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      summary: Edit a group
      description: >
        This method updates the group with the specified id. The values of the group properties are replaced with the values from the request body. Unspecified values are replaced with default values.
      tags:
        - group-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The group id
          example: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
      requestBody:
        description: >
          You must specify the group parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
            example:
              name: YT-80
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
              example:
                id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                name: YT-80
        '404':
          description: Group replace error. Group not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Group replace error. Group not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: >
            Validation error. The group name must not be null and must contain at least one non-whitespace character.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T19:07:45.652+00:0"
                status: Bad Request
                violations:
                  - message: The group name must not be null and must contain at least one non-whitespace character
                    propertyPath: groupDto
                    invalidValue: "  "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete a group
      description: >
        This method removes the group with the specified id.
      tags:
        - group-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The group id
          example: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
      responses:
        '200':
          description: Successful operation
        '404':
          description: Group delete error. Group not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Group delete error. Group not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    patch:
      summary: Edit a group
      description: >
        This method updates the group with the specified id. The values of the group properties are replaced with the values from the request body. Unspecified values are not changed.
      tags:
        - group-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The group id
          example: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
      requestBody:
        description: >
          You must specify the group parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
            example:
              name: YT-80
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
              example:
                id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                name: YT-80
        '404':
          description: Group update error. Group not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Group update error. Group not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: >
            Validation error. The group name must not be null and must contain at least one non-whitespace character.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T19:07:45.652+00:0"
                status: Bad Request
                violations:
                  - message: The group name must not be null and must contain at least one non-whitespace character
                    propertyPath: groupDto
                    invalidValue: "  "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/courses/{id}:
    summary: Represents a course
    description: >
      This resource represents an individual course in the system.
      Each course is identified by a numeric `id`.
    get:
      summary: Get a course by id
      description: >
        This method allows you to get a school course by its id.
      tags:
        - course-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The course id
          example: 1a94740f-cab8-4522-91fa-ad996c72b92d
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDto'
              example: 
                name: Computer science
                description: Subject Computer science
        '404':
          description: Course not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Course not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      summary: Edit a course
      description: >
        This method updates the course with the specified id. The values of the course properties are replaced with the values from the request body. Unspecified values are replaced with default values.
      tags:
        - course-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The course id
          example: 1a94740f-cab8-4522-91fa-ad996c72b92d
      requestBody:
        description: >
          You must specify the course parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDto'
            examples:
              All properties are filled in:
                value:
                  name: Computer science
                  description: Subject Computer science
              Not all properties are filled in:
                value:
                  description: Subject Computer science
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDto'
              examples:
                All properties are filled in:
                  value:
                    id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                    name: Computer science
                    description: Subject Computer science
                Not all properties are filled in:
                  value:
                    id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                    name: null
                    description: Subject Computer science
        '404':
          description: Course replace error. Course not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Course replace error. Course not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: >
            The course name must not be null and must contain at least one non-whitespace character.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T20:05:27.674+00:00"
                status: Bad Request
                violations:
                  - message: The course name must not be null and must contain at least one non-whitespace character
                    propertyPath: updatePut.courseDto.name
                    invalidValue: "  "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete a course
      description: >
        This method removes the course with the specified id.
      tags:
        - course-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The course id
          example: 1a94740f-cab8-4522-91fa-ad996c72b92d
      responses:
        '200':
          description: Successful operation
        '404':
          description: Course delete error. Course not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Course delete error. Course not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    patch:
      summary: Edit a course
      description: >
        This method updates the course with the specified id. The values of the course properties are replaced with the values from the request body. Unspecified values are not changed.
      tags:
        - course-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The course id
          example: cea9af46-4727-4822-8f06-807efe886f42
      requestBody:
        description: >
          You must specify the course parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDto'
            example: 
              description: Subject Computer science
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDto'
              example:
                id: cea9af46-4727-4822-8f06-807efe886f42
                name: Economics
                description: Subject Economics
        '404':
          description: Course update error. Course not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Course update error. Course not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: >
            Validation error. The course name must contain at least one non-whitespace character. Can be null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T20:05:27.674+00:00"
                status: Bad Request
                violations:
                  - message: The course name must contain at least one non-whitespace character. Can be null
                    propertyPath: updatePost.courseDto.name
                    invalidValue: "  "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/permissions/{id}:
    summary: Represents a permission
    description: >
      This resource represents an individual permission in the system.
      Each permission is identified by a `id`.
    get:
      summary: Get a permission by id
      description: >
        This method allows you to get a permission by its id.
      tags:
        - permission-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The permission id
          example: USER_UPDATE
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
              example:
                name: USER
                description: "Endpoint: user; operation: update"
        '404':
          description: Permission not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Permission not found by id = WIZARD_CREATE
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    patch:
      summary: Edit a permission
      description: >
        This method updates the permission with the specified id. The values of the permission properties are replaced with the values from the request body. Unspecified values are not changed.
      tags:
        - permission-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The permission id
          example: USER_UPDATE
      requestBody:
        description: >
          You must specify the permission parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDto'
            example: 
              description: "Endpoint: user; op: update"
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
              example:
                name: USER_UPDATE
                description: "Endpoint: user; op: update"
        '404':
          description: Permission update error. Permission not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Permission not found by id = WIZARD_CREATE
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete a permission
      description: >
        This method removes the permission with the specified id.
      tags:
        - permission-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The permission id
          example: USER_UPDATE
      responses:
        '200':
          description: Successful operation
        '404':
          description: Permission delete error. Permission not found by id = WIZARD
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: Rold delete error. Permission not found by id = WIZARD
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/users/{id}:
    summary: Represents a user
    description: >
      This resource represents an individual user in the system.
      Each user is identified by a numeric `id`.
    get:
      summary: Get a user by id
      description: >
        This method allows you to get a user by its id.
      tags:
        - user-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The user id
          example: f3f6ab13-61b4-48c0-a65b-b03363116190
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
              example:
                id: f3f6ab13-61b4-48c0-a65b-b03363116190
                username: user
                password: $2a$12$qh9xaN766tGARzNL0xOrAuBRF0ZkPMMkvdtKS.NMVCwxOItQv9MLm
                permissions:
                  - name: COURSE_READ
                    description: "Endpoint: courses; operation: read"
                  - name: GROUP_READ
                    description: "Endpoint: groups; operation: read"
                  - name: STUDENT_READ
                    description: "Endpoint: students; operation: read"
        '404':
          description: User not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: User not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      summary: Edit a user
      description: >
        This method updates the user with the specified id. The values of the user properties are replaced with the values from the request body. Unspecified values are replaced with default values.
      tags:
        - user-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The user id
          example: f3f6ab13-61b4-48c0-a65b-b03363116190
      requestBody:
        description: >
          You must specify the user properties.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
            example:
              username: user
              password: userPass
              permissions:
                - name: COURSE_READ
                  description: "Endpoint: courses; op: read"
                - name: GROUP_READ
                  description: "Endpoint: groups; op: read"
                - name: STUDENT_READ
                  description: "Endpoint: students; op: read"
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
              example:
                username: user
                password: userPass
                permissions:
                  - name: COURSE_READ
                    description: "Endpoint: courses; op: read"
                  - name: GROUP_READ
                    description: "Endpoint: groups; op: read"
                  - name: STUDENT_READ
                    description: "Endpoint: students; op: read"
        '404':
          description: User replace error. User not found by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: User replace error. User not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Consists only of spaces:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The user's name must not be null and must contain at least one non-whitespace character
                        propertyPath: updatePut.userDto.username
                        invalidValue: " "
                      - message: The user's password must not be null and must contain at least one non-whitespace character
                        propertyPath: updatePut.userDto.password
                        invalidValue: " "
                The role is null:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The role must not be null
                        propertyPath: replace.userDto.role
                        invalidValue: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete a user
      description: >
        This method removes the user with the specified id.
      tags:
        - user-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The user id
          example: f3f6ab13-61b4-48c0-a65b-b03363116190
      responses:
        '200':
          description: Successful operation
        '404':
          description: User delete error. User not found by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: User delete error. User not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    patch:
      summary: Edit a user
      description: >
        This method updates the user with the specified id. The values of the user properties are replaced with the values from the request body. Unspecified values are not changed.
      tags:
        - user-controller
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The user id
          example: f3f6ab13-61b4-48c0-a65b-b03363116190
      requestBody:
        description: >
          You must specify the user parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
            example:
              password: newPass
        required: true
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
              example:
                id: f3f6ab13-61b4-48c0-a65b-b03363116190
                username: user
                password: $2a$10$yXXVd5eeiuxyLfLOGTK.R./tiHUA4R3Od6jxUONTZceGgo6lSJHE6
                permissions:
                  - name: COURSE_READ
                    description: "Endpoint: courses; operation: read"
                  - name: GROUP_READ
                    description: "Endpoint: groups; operation: read"
                  - name: STUDENT_READ
                    description: "Endpoint: students; operation: read"
        '404':
          description: User update error. User not found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              example:
                timestamp: "2022-11-17T17:47:01.030+00:00"
                status: Not Found
                message: User update error. User not found by id = a46e9a8e-f535-4437-8bbf-c3a7216e74e6
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Consists only of spaces:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The user's name must not be null and must contain at least one non-whitespace character
                        propertyPath: updatePatch.userDto.username
                        invalidValue: " "
                      - message: The user's password must not be null and must contain at least one non-whitespace character
                        propertyPath: updatePatch.userDto.password
                        invalidValue: " "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/students:
    summary: Represents a students
    description: >
      This resource represents an all students in the system.
    get:
      summary: Get all students
      description: >
        This method allows you to get a list of all school students. If the filter parameter is set, the method returns a list of filtered students.
      tags:
        - student-controller
      parameters:
        - name: courseId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: ID of the course the students are studying at.
          example: 1a94740f-cab8-4522-91fa-ad996c72b92d
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          description: Page number, size, sorting
          example:
            page: 0
            size: 3
            sort:
              - firstName,desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentDto'
              example:
                - id: a46e9a8e-f535-4437-8bbf-c3a7216e74e5
                  firstName: Mia
                  lastName: Phillips
                  group:
                    id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                    name: YT-80
                  courses:
                    - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                      name: Computer science
                      description: Subject Computer science
                    - id: cea9af46-4727-4822-8f06-807efe886f42
                      name: Economics
                      description: Subject Economics
                - id: 821a15ed-2e3c-4f32-a0b7-4e52d81b550f
                  firstName: Jessica
                  lastName: Anderson
                  group:
                    id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                    name: YT-80
                  courses:
                    - id: acffffde-c76d-4618-9a32-2e79d5cd087e
                      name: Music
                      description: Subject Music
                    - id: 51d5f402-7150-4bab-af7c-816bdba735f5
                      name: Astronomy
                      description: Subject Astronomy
                    - id: 99c44d20-1056-49a7-a3a4-2e86cf4e0688
                      name: Botany
                      description: Subject Botany
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Add a new student
      description: >
        This method adds a new student to the school.
      tags:
        - student-controller
      requestBody:
        description: >
          You must specify the student parameters. For the group and courses, it is enough to fill in only the id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
            examples:
              All properties are filled in:
                value:
                  firstName: Mia
                  lastName: Phillips
                  group:
                    id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                  courses:
                  - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                  - id: cea9af46-4727-4822-8f06-807efe886f42
              Not all properties are filled in:
                value:
                  firstName: Mia
                  lastName: Phillips
                  group:
                    id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
            
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
              examples:
                All properties are filled in:
                  value:
                    id: d62bf582-59a2-4c07-8149-dd26ffa12af3
                    firstName: Mia
                    lastName: Phillips
                    group:
                      id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                      name: null
                    courses:
                    - id: 1a94740f-cab8-4522-91fa-ad996c72b92d
                      name: null
                      description: null
                    - id: cea9af46-4727-4822-8f06-807efe886f42
                      name: null
                      description: null
                Not all properties are filled in:
                  value:
                    id: d62bf582-59a2-4c07-8149-dd26ffa12af3
                    firstName: Mia
                    lastName: Phillips
                    group:
                      id: 46fa82ce-4e6d-45ae-a4e4-914971f1eb4f
                      name: null
                    courses: null
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Consists only of spaces:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The student's last name must not be null and must contain at least one non-whitespace character
                        propertyPath: save.studentDto.lastName
                        invalidValue: "  "
                      - message: The student's first name must not be null and must contain at least one non-whitespace character
                        propertyPath: save.studentDto.firstName
                        invalidValue: "  "
                Less than two characters:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The student's last name must consist of at least two characters
                        propertyPath: studentDto
                        invalidValue: B
                      - message: The student's first name must consist of at least two characters
                        propertyPath: studentDto
                        invalidValue: A
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete all students
      description: >
        This method removes all students.
      tags:
        - student-controller
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/groups:
    summary: Represents a groups
    description: >
      This resource represents an all groups in the system.
    get:
      summary: Get all groups
      description: >
        This method allows you to get a list of all school groups. If the filter parameter is set, the method returns a list of filtered groups. In this case, the method returns groups in which the number of students is less than or equal to the specified.
      tags:
        - group-controller
      parameters:
        - name: numberStudents
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
          description: Number of students
          example: 15
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          description: Page number, size, sorting
          example:
            page: 0
            size: 3
            sort:
              - name,desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
              example:
                - id: 408a9358-c6b1-4b36-8912-7bbd4803f1b1
                  name: BA-51
                - id: d73d111e-7159-48e5-9247-e050db9e0437
                  name: OU-60
                - id: 10562d54-0acc-4fbf-baba-98c0aa77a900
                  name: SV-51
        '400':
          description: >
            Validation error. The number of students must be greater than or equal to zero.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T19:07:45.652+00:0"
                status: Bad Request
                violations:
                  - message: The number of students must be greater than or equal to zero
                    propertyPath: findAll.numberStudents
                    invalidValue: -2
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Add a new group
      description: >
        This method adds a new group to the school.
      tags:
        - group-controller
      requestBody:
        description: >
          You must specify the group parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
            example:
              name: SV-51
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
              example:
                id: c20bf536-996e-45cb-8f8d-b57f7b9a5998
                name: SV-51
        '400':
          description: >
            Validation error. The group name must not be null and must contain at least one non-whitespace character.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T19:07:45.652+00:0"
                status: Bad Request
                violations:
                  - message: The group name must not be null and must contain at least one non-whitespace character
                    propertyPath: groupDto
                    invalidValue: "  "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete all groups
      description: >
        This method removes all groups.
      tags:
        - group-controller
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/courses:
    summary: Represents a courses
    description: >
      This resource represents an all courses in the system.
    get:
      summary: Get all courses
      description: >
        This method allows you to get a list of all school courses.
      tags:
        - course-controller
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          description: Page number, size, sorting
          example:
            page: 0
            size: 3
            sort:
              - name,desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseDto'
              example:
                - id: 1565f8d4-35bb-4c48-9045-c91acdb753ec
                  name: Chemistry
                  description:  Subject Chemistry
                - id: df5b330d-5f6a-4223-8d0b-b71f45636b9f
                  name: Literature
                  description:  Subject Literature
                - id: acffffde-c76d-4618-9a32-2e79d5cd087e
                  name: Music
                  description: Subject Music
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Add a new course
      description: >
        This method adds a new course to the school.
      tags:
        - course-controller
      requestBody:
        description: >
          You must specify the course parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDto'
            example:
              name: Chemistry
              description:  Subject Chemistry
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDto'
              example:
                id: 7a46abc6-d100-40f1-a16f-a1a0ea18f630
                name: Chemistry
                description:  Subject Chemistry
        '400':
          description: >
            Validation error. The course name must not be null and must contain at least one non-whitespace character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T20:05:27.674+00:00"
                status: Bad Request
                violations:
                  - message: The course name must not be null and must contain at least one non-whitespace character
                    propertyPath: save.courseDto.name
                    invalidValue: "  "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete all courses
      description: >
        This method removes all courses.
      tags:
        - course-controller
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/permissions:
    summary: Represents a permission
    description: >
      This resource represents an all permissions in the system.
    get:
      summary: Get all permissions
      description: >
        This method allows you to get a list of all permissions.
      tags:
        - permission-controller
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          description: Page number, size, sorting
          example:
            page: 0
            size: 3
            sort:
              - name,desc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionDto'
              example:
                - name: USER_UPDATE
                  description: "Endpoint: user; operation: update"
                - name: USER_READ
                  description: "Endpoint: user; operation: read"
                - name: USER_DELETE
                  description: "Endpoint: user; operation: delete"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Add a new permission
      description: >
        This method adds a new permission.
      tags:
        - permission-controller
      requestBody:
        description: >
          You must specify the permission parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDto'
            example:
              name: WIZZARD_CREATE
              description: "Endpoint: super_admin; operation: create"
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDto'
              example:
                name: WIZZARD_CREATE
                description:  "Endpoint: super_admin; operation: create"
        '400':
          description: >
            Validation error. The permission name must not be null and must contain at least one non-whitespace character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                timestamp: "2022-11-17T20:05:27.674+00:00"
                status: Bad Request
                violations:
                  - message: The permission name must not be null and must contain at least one non-whitespace character
                    propertyPath: save.permissionDto.name
                    invalidValue: "  "
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete all permissions
      description: >
        This method removes all permissions.
      tags:
        - permission-controller
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/users:
    summary: Represents a users
    description: >
      This resource represents an all users in the system.
    get:
      summary: Get all users
      description: >
        This method allows you to get a list of all users.
      tags:
        - user-controller
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          description: Page number, size, sorting
          example:
            page: 0
            size: 2
            sort:
              - username,asc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
              example:
              - id: 17b5254a-e96e-4e85-a6d3-6f2a4b68f16c
                username: teacher
                password: $2a$12$XWOgJwQlqcjShcivTEGztOoRrE.9WsQBKBUVECj/mW2yBGjv0VgUi
                permissions:
                  - name: COURSE_READ
                    description: "Endpoint: courses; operation: read"
                  - name: COURSE_DELETE
                    description: "Endpoint: courses; operation: delete"
                  - name: GROUP_DELETE
                    description: "Endpoint: groups; operation: delete"
                  - name: GROUP_UPDATE
                    description: "Endpoint: groups; operation: update"
                  - name: GROUP_CREATE
                    description: "Endpoint: groups; operation: create"
                  - name: GROUP_READ
                    description: "Endpoint: groups; operation: read"
                  - name: COURSE_CREATE
                    description: "Endpoint: courses; operation: create"
                  - name: COURSE_UPDATE
                    description: "Endpoint: courses; operation: update"
                  - name: STUDENT_READ
                    description: "Endpoint: students; operation: read"
              - id: f3f6ab13-61b4-48c0-a65b-b03363116190
                username: user
                password: $2a$10$yXXVd5eeiuxyLfLOGTK.R./tiHUA4R3Od6jxUONTZceGgo6lSJHE6
                permissions:
                  - name: COURSE_READ
                    description: "Endpoint: courses; operation: read"
                  - name: GROUP_READ
                    description: "Endpoint: groups; operation: read"
                  - name: STUDENT_READ
                    description: "Endpoint: students; operation: read"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      summary: Add a new user
      description: >
        This method adds a new user.
      tags:
        - user-controller
      requestBody:
        description: >
          You must specify the user parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
            example:
              username: newUser
              password: newUserPass
              permissions:
                - name: COURSE_READ
                - name: GROUP_READ
                - name: STUDENT_READ
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
              example:
                id: 4c52c71e-729e-48e6-9fc4-41fde2923434
                username: newUser
                password: $2a$10$8WeoqD4pcOkY49qk1yFah.kWvhVC/BDii3GC3znJh/.ddsPbDaQ2a
                permissions:
                  - name: COURSE_READ
                    description: null
                  - name: GROUP_READ
                    description: null
                  - name: STUDENT_READ
                    description: null
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                Consists only of spaces:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The user's name must not be null and must contain at least one non-whitespace character
                        propertyPath: save.userDto.username
                        invalidValue: " "
                      - message: The user's password must not be null and must contain at least one non-whitespace character
                        propertyPath: save.userDto.password
                        invalidValue: " "
                The permission is null:
                  value:
                    timestamp: "2022-11-18T08:34:12.995+00:00"
                    status: Bad Request
                    violations:
                      - message: The permission must not be null
                        propertyPath: save.userDto.permissions
                        invalidValue: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      summary: Delete all users
      description: >
        This method removes all students.
      tags:
        - student-controller
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
components:
  schemas:
    GroupDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    CourseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
    StudentDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        group:
          $ref: '#/components/schemas/GroupDto'
        firstName:
          type: string
          minLength: 2
        lastName:
          type: string
          minLength: 2
        courses:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CourseDto'
    PermissionDto:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    UserDto:
      required:
        - password
        - username
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          maxLength: 2147483647
          minLength: 1
          type: string
        password:
          maxLength: 2147483647
          minLength: 1
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDto'
    CustomError:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: string
        message:
          type: string
    Violation:
      type: object
      properties:
        message:
          type: string
        propertyPath:
          type: string
        invalidValue:
          type: object
    ValidationError:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: string
        violations:
          type: array
          items:
            $ref: '#/components/schemas/Violation'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ForbiddenError:
      description: Access to the requested resource is forbidden